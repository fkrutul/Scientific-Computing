Welcome to DrRacket, version 7.6 [cs].
Language: racket, with debugging [custom].
> (run 1 (q)
    (evalo '(cons 3 4) q))
((3 . 4))
> (+ 3 4)
7
> '(+ 3 4)
(+ 3 4)
> (eval '(+ 3 4))
7
> (run 1 (q)
    (evalo '(cons 'I (cons 'love (cons 'you '()))) q))
((I love you))
> (run 1 (expr)
    (evalo expr '(I love you)))
('(I love you))
> (run 99 (expr)
    (evalo expr '(I love you)))
('(I love you)
 (((lambda _.0 '(I love you))) (=/= ((_.0 quote))) (sym _.0))
 (((lambda _.0 '(I love you)) _.1) (=/= ((_.0 quote))) (num _.1) (sym _.0))
 (((lambda _.0 '(I love you)) _.1 _.2) (=/= ((_.0 quote))) (num _.1 _.2) (sym _.0))
 (list 'I 'love 'you)
 (((lambda _.0 '(I love you)) _.1 _.2 _.3) (=/= ((_.0 quote))) (num _.1 _.2 _.3) (sym _.0))
 (((lambda _.0 '(I love you)) list) (=/= ((_.0 quote))) (sym _.0))
 ((lambda () '(I love you)))
 (((lambda _.0 '(I love you)) list _.1) (=/= ((_.0 quote))) (num _.1) (sym _.0))
 ((car '((I love you) . _.0)) (absento (closure _.0) (prim _.0)))
 (((lambda _.0 '(I love you)) _.1 _.2 _.3 _.4) (=/= ((_.0 quote))) (num _.1 _.2 _.3 _.4) (sym _.0))
 (((lambda _.0 '(I love you)) _.1 list) (=/= ((_.0 quote))) (num _.1) (sym _.0))
 (cons 'I '(love you))
 (((lambda _.0 '(I love you)) '_.1) (=/= ((_.0 quote))) (sym _.0) (absento (closure _.1) (prim _.1)))
 (((lambda _.0 _.0) 'I 'love 'you) (sym _.0))
 (((lambda _.0 '(I love you)) list _.1 _.2) (=/= ((_.0 quote))) (num _.1 _.2) (sym _.0))
 (((lambda _.0 '(I love you)) _.1 list _.2) (=/= ((_.0 quote))) (num _.1 _.2) (sym _.0))
 (((lambda _.0 '(I love you)) not) (=/= ((_.0 quote))) (sym _.0))
 (((lambda _.0 '(I love you)) '_.1 _.2) (=/= ((_.0 quote))) (num _.2) (sym _.0) (absento (closure _.1) (prim _.1)))
 ((letrec ((_.0 (lambda _.1 _.2))) '(I love you)) (=/= ((_.0 quote))) (sym _.1))
 ((cdr '(_.0 I love you)) (absento (closure _.0) (prim _.0)))
 (((lambda _.0 '(I love you)) _.1 _.2 _.3 _.4 _.5) (=/= ((_.0 quote))) (num _.1 _.2 _.3 _.4 _.5) (sym _.0))
 (((lambda _.0 '(I love you)) _.1 _.2 list) (=/= ((_.0 quote))) (num _.1 _.2) (sym _.0))
 (((lambda _.0 '(I love you)) list _.1 _.2 _.3) (=/= ((_.0 quote))) (num _.1 _.2 _.3) (sym _.0))
 (((lambda _.0 '(I love you)) list list) (=/= ((_.0 quote))) (sym _.0))
 (((lambda _.0 '(I love you)) _.1 '_.2) (=/= ((_.0 quote))) (num _.1) (sym _.0) (absento (closure _.2) (prim _.2)))
 (((lambda _.0 '(I love you)) _.1 list _.2 _.3) (=/= ((_.0 quote))) (num _.1 _.2 _.3) (sym _.0))
 (((lambda _.0 '(I love you)) not _.1) (=/= ((_.0 quote))) (num _.1) (sym _.0))
 (((lambda _.0 '(I love you)) '_.1 _.2 _.3) (=/= ((_.0 quote))) (num _.2 _.3) (sym _.0) (absento (closure _.1) (prim _.1)))
 ((list ((lambda _.0 'I)) 'love 'you) (=/= ((_.0 quote))) (sym _.0))
 ((match _.0 (_.0 '(I love you)) . _.1) (num _.0))
 (((lambda _.0 '(I love you)) _.1 _.2 list _.3) (=/= ((_.0 quote))) (num _.1 _.2 _.3) (sym _.0))
 (((lambda _.0 '(I love you)) _.1 not) (=/= ((_.0 quote))) (num _.1) (sym _.0))
 (((lambda _.0 '(I love you)) equal?) (=/= ((_.0 quote))) (sym _.0))
 (((lambda _.0 '(I love you)) list list _.1) (=/= ((_.0 quote))) (num _.1) (sym _.0))
 (((lambda _.0 '(I love you)) _.1 '_.2 _.3) (=/= ((_.0 quote))) (num _.1 _.3) (sym _.0) (absento (closure _.2) (prim _.2)))
 (((lambda (_.0) '(I love you)) _.1) (=/= ((_.0 quote))) (num _.1) (sym _.0))
 (and '(I love you))
 (((lambda _.0 '(I love you)) _.1 _.2 _.3 _.4 _.5 _.6) (=/= ((_.0 quote))) (num _.1 _.2 _.3 _.4 _.5 _.6) (sym _.0))
 (((lambda _.0 '(I love you)) _.1 _.2 _.3 list) (=/= ((_.0 quote))) (num _.1 _.2 _.3) (sym _.0))
 ((list 'I 'love ((lambda _.0 'you))) (=/= ((_.0 quote))) (sym _.0))
 ((list ((lambda _.0 'I) _.1) 'love 'you) (=/= ((_.0 quote))) (num _.1) (sym _.0))
 (((lambda _.0 '(I love you)) list _.1 _.2 _.3 _.4) (=/= ((_.0 quote))) (num _.1 _.2 _.3 _.4) (sym _.0))
 (((lambda _.0 '(I love you)) list _.1 list) (=/= ((_.0 quote))) (num _.1) (sym _.0))
 ((letrec ((_.0 (lambda () _.1))) '(I love you)) (=/= ((_.0 quote))))
 ((list 'I 'love ((lambda _.0 'you) _.1)) (=/= ((_.0 quote))) (num _.1) (sym _.0))
 (((lambda _.0 '(I love you)) _.1 list _.2 _.3 _.4) (=/= ((_.0 quote))) (num _.1 _.2 _.3 _.4) (sym _.0))
 ((list 'I ((lambda _.0 'love)) 'you) (=/= ((_.0 quote))) (sym _.0))
 (((lambda _.0 '(I love you)) not _.1 _.2) (=/= ((_.0 quote))) (num _.1 _.2) (sym _.0))
 (((lambda _.0 '(I love you)) _.1 list list) (=/= ((_.0 quote))) (num _.1) (sym _.0))
 (((lambda _.0 '(I love you)) _.1 _.2 '_.3) (=/= ((_.0 quote))) (num _.1 _.2) (sym _.0) (absento (closure _.3) (prim _.3)))
 (((lambda _.0 '(I love you)) '_.1 _.2 _.3 _.4) (=/= ((_.0 quote))) (num _.2 _.3 _.4) (sym _.0) (absento (closure _.1) (prim _.1)))
 (((lambda _.0 '(I love you)) '_.1 list) (=/= ((_.0 quote))) (sym _.0) (absento (closure _.1) (prim _.1)))
 (((lambda _.0 '(I love you)) list '_.1) (=/= ((_.0 quote))) (sym _.0) (absento (closure _.1) (prim _.1)))
 ((list 'I 'love ((lambda _.0 'you) _.1 _.2)) (=/= ((_.0 quote))) (num _.1 _.2) (sym _.0))
 (((lambda _.0 '(I love you)) _.1 _.2 list _.3 _.4) (=/= ((_.0 quote))) (num _.1 _.2 _.3 _.4) (sym _.0))
 (((lambda _.0 '(I love you)) _.1 not _.2) (=/= ((_.0 quote))) (num _.1 _.2) (sym _.0))
 (((lambda () ((lambda _.0 '(I love you))))) (=/= ((_.0 quote))) (sym _.0))
 (((lambda _.0 '(I love you)) equal? _.1) (=/= ((_.0 quote))) (num _.1) (sym _.0))
 (((lambda _.0 '(I love you)) list list _.1 _.2) (=/= ((_.0 quote))) (num _.1 _.2) (sym _.0))
 (((lambda _.0 '(I love you)) _.1 '_.2 _.3 _.4) (=/= ((_.0 quote))) (num _.1 _.3 _.4) (sym _.0) (absento (closure _.2) (prim _.2)))
 (car (list '(I love you)))
 (((lambda () ((lambda _.0 '(I love you)) _.1))) (=/= ((_.0 quote))) (num _.1) (sym _.0))
 ((list 'I ((lambda _.0 'love) _.1) 'you) (=/= ((_.0 quote))) (num _.1) (sym _.0))
 ((list 'I 'love ((lambda _.0 'you) _.1 _.2 _.3)) (=/= ((_.0 quote))) (num _.1 _.2 _.3) (sym _.0))
 ((list 'I 'love ((lambda _.0 'you) list)) (=/= ((_.0 quote))) (sym _.0))
 (((lambda _.0 '(I love you)) _.1 _.2 _.3 list _.4) (=/= ((_.0 quote))) (num _.1 _.2 _.3 _.4) (sym _.0))
 (((lambda _.0 '(I love you)) _.1 _.2 not) (=/= ((_.0 quote))) (num _.1 _.2) (sym _.0))
 (((lambda _.0 _.0) ((lambda _.1 'I)) 'love 'you) (=/= ((_.1 quote))) (sym _.0 _.1))
 (((lambda _.0 '(I love you)) list _.1 list _.2) (=/= ((_.0 quote))) (num _.1 _.2) (sym _.0))
 (((lambda _.0 '(I love you)) list not) (=/= ((_.0 quote))) (sym _.0))
 (((lambda _.0 '(I love you)) _.1 equal?) (=/= ((_.0 quote))) (num _.1) (sym _.0))
 (((lambda () ((lambda _.0 '(I love you)) _.1 _.2))) (=/= ((_.0 quote))) (num _.1 _.2) (sym _.0))
 (((lambda _.0 '(I love you)) _.1 list list _.2) (=/= ((_.0 quote))) (num _.1 _.2) (sym _.0))
 (((lambda _.0 '(I love you)) _.1 _.2 '_.3 _.4) (=/= ((_.0 quote))) (num _.1 _.2 _.4) (sym _.0) (absento (closure _.3) (prim _.3)))
 ((car (list '(I love you) _.0)) (num _.0))
 ((lambda () (list 'I 'love 'you)))
 (((lambda _.0 '(I love you)) '_.1 list _.2) (=/= ((_.0 quote))) (num _.2) (sym _.0) (absento (closure _.1) (prim _.1)))
 (((lambda _.0 '(I love you)) symbol?) (=/= ((_.0 quote))) (sym _.0))
 (((lambda _.0 '(I love you)) list '_.1 _.2) (=/= ((_.0 quote))) (num _.2) (sym _.0) (absento (closure _.1) (prim _.1)))
 ((list 'I 'love ((lambda _.0 'you) list _.1)) (=/= ((_.0 quote))) (num _.1) (sym _.0))
 (or '(I love you))
 ((if _.0 '(I love you) _.1) (num _.0))
 ((list ((lambda _.0 'I) _.1 _.2) 'love 'you) (=/= ((_.0 quote))) (num _.1 _.2) (sym _.0))
 ((match _.0 (_.1 '(I love you)) . _.2) (=/= ((_.1 quote))) (num _.0) (sym _.1))
 (((lambda _.0 '(I love you)) _.1 _.2 _.3 _.4 _.5 _.6 _.7) (=/= ((_.0 quote))) (num _.1 _.2 _.3 _.4 _.5 _.6 _.7) (sym _.0))
 ((list 'I 'love ((lambda _.0 'you) _.1 _.2 _.3 _.4)) (=/= ((_.0 quote))) (num _.1 _.2 _.3 _.4) (sym _.0))
 ((list 'I 'love ((lambda _.0 'you) _.1 list)) (=/= ((_.0 quote))) (num _.1) (sym _.0))
 (((lambda _.0 '(I love you)) _.1 _.2 _.3 _.4 list) (=/= ((_.0 quote))) (num _.1 _.2 _.3 _.4) (sym _.0))
 ((match list (_.0 '(I love you)) . _.1) (=/= ((_.0 quote))) (sym _.0))
 (((lambda _.0 '(I love you)) list _.1 _.2 _.3 _.4 _.5) (=/= ((_.0 quote))) (num _.1 _.2 _.3 _.4 _.5) (sym _.0))
 (((lambda _.0 '(I love you)) list _.1 _.2 list) (=/= ((_.0 quote))) (num _.1 _.2) (sym _.0))
 (((lambda _.0 '(I love you)) _.1 list _.2 _.3 _.4 _.5) (=/= ((_.0 quote))) (num _.1 _.2 _.3 _.4 _.5) (sym _.0))
 (((lambda _.0 '(I love you)) not _.1 _.2 _.3) (=/= ((_.0 quote))) (num _.1 _.2 _.3) (sym _.0))
 (((lambda () ((lambda _.0 '(I love you)) _.1 _.2 _.3))) (=/= ((_.0 quote))) (num _.1 _.2 _.3) (sym _.0))
 (((lambda _.0 '(I love you)) '_.1 _.2 _.3 _.4 _.5) (=/= ((_.0 quote))) (num _.2 _.3 _.4 _.5) (sym _.0) (absento (closure _.1) (prim _.1)))
 ((car (list '(I love you) _.0 _.1)) (num _.0 _.1))
 (((lambda () ((lambda _.0 '(I love you)) list))) (=/= ((_.0 quote))) (sym _.0))
 ((list 'I 'love ((lambda _.0 'you) '_.1)) (=/= ((_.0 quote))) (sym _.0) (absento (closure _.1) (prim _.1))))
> (car (list '(I love you) 3 4))
(I love you)
> 